// stdlib
#include <assert.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
// system
#include <fcntl.h>
#include <poll.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>
// C++
#include <vector>

struct Conn {
    int fd = -1; 
    // applications intention for the event loop 
    bool want_read = false; 
    bool want_write = false; 
    bool want_close = false; 

    // buffered input and output 
    std::vector<uint8_t> incoming; // data to be parsed by the application 
    std::vector<uint8_t> outgoing; // responses generated by the application 
};

const size_t k_max_msg = 4096;

static void msg(const char *msg) {
    fprintf(stderr, "%s\n", msg);
}

static void msg_errno(const char *msg) {
    fprintf(stderr, "[errno:%d] %s\n", errno, msg);
}

static void die(const char *msg) {
    int err = errno;
    fprintf(stderr, "[%d] %s\n", err, msg);
    abort();
}
/*AF_INET is for IPv4. Use AF_INET6 for IPv6 or dual-stack sockets.
SOCK_STREAM is for TCP. Use SOCK_DGRAM for UDP.
The 3rd argument is 0 and useless for our purposes.*/

static int getSocketHandle() {
    return socket(AF_INET, SOCK_STREAM, 0); 
}


// This makes the listening socket non-blocking with fcntl.
static void fd_set_nb(int fd){
    fcntl(fd,  F_SETFL, fcntl(fd, F_GETFL, 0) | O_NONBLOCK);
}

static Conn *handle_accept (int fd){
    struct sockaddr_in client_addr = {};
    socklen_t addrlen = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr *)&client_addr, &addrlen); // returns a new file descriptor, a connected one
    if (connfd < 0){
        return NULL; 
    }
    // set the new connection fd to nonblocking mode 
    fd_set_nb(connfd);
    // create a "struct Conn"
    Conn * conn = new Conn();
    conn->fd = connfd; 
    conn->want_read = true; // read 1st request 
    return conn;
}

// append to the back 
static void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len) {
    buf.insert(buf.end(), data, data + len);
}

// remove from the front
static void buf_consume(std::vector<uint8_t> &buf, size_t n) {
    buf.erase(buf.begin(), buf.begin() + n);
}

static void handle_read(Conn *conn){
    // Do a non blocking read
    uint8_t buf[4 * 1024];
    ssize_t rv = read(conn->fd, buf, sizeof(buf)); 

    if(rv < 0 && errno == EAGAIN){
        return; // actually not ready 
    }

    if (rv < 0){
        msg_errno("read() error");
        conn->want_close = true; 
        return;
    }

    if (rv == 0){
        if(conn->incoming.size() == 0){
            msg("Client closed");
        }else{
            msg("Unexpected EOF");
        }
        conn->want_close = true;
        return;
    }
    
    // Add new data to the Conn:incoming buffer
    buf_append(conn->incoming, buf, sizeof(buf));   

    // parse request and generate responses
    while(try_one_request(conn));

    // update intentions 
    if (conn->incoming.size() == 0) { // all data read
        conn->want_read = false; 
        conn->want_write = true; 
        // The socket is likely ready to write in a request-response protocol,
        // try to write it without waiting for the next iteration.
        return handle_write(conn);
    } // else want read
}

// process one request if there is enough data 

static bool try_one_request(Conn *conn){
    // we try to parse the accumulated buffer
    // Protocol: message header
    if ( conn->incoming.size() < 4){
        return false;
    }

    uint32_t len = 0; 
    memcpy (&len, conn->incoming.data(), 4); // vector.data returns a pointer to the first element of vector 
    // after the memcpy len holds the size of the message as the first 4 bytes are the size and the rest is the payload 
    if (len > k_max_msg) { // protocol error 
        conn->want_close = true; 
        return false; // want close
    }

    // Protocol: message body
    if(4 + len > conn->incoming.size()){ // 4 bytes of header + lenght bytes of boddy if it is bigger than the incoming buffer then we know the message is incomplete 
        return false; // want read
    }

    const uint8_t *request = &conn->incoming[4];
    // process the parsed message 
    printf("client says: len:%d data:%.*s\n",
          len, len < 100 ? len : 100, request);
    // generate the response (echo)
    buf_append(conn->outgoing, (const uint8_t *)&len, 4);
    buf_append(conn->outgoing, request, len);
    // remove the message from Conn::incoming 
    buf_consume(conn->incoming, 4 +len);

    return true; // success
}

static void handle_write(Conn *conn){
    assert(conn->outgoing.size() > 0);

    ssize_t rv = write(conn->fd, conn->outgoing.data(), conn->outgoing.size());

    if (rv < 0 && errno == EAGAIN) {
        return; // actually not ready
    }
    
    if(rv < 0){
        msg_errno("write() error");
        conn->want_close = true;    
        return;
    }
    // remove written data from outgoing 
    buf_consume(conn->outgoing, (size_t)rv);

    // update intentions
    if (conn->outgoing.size() == 0){ // all data written 
        conn->want_read = true; 
        conn->want_write = false;
    } // else want to write 
} 
int main () {
    int fd = getSocketHandle();
    if (fd < 0) {
        die("socket()");
    }

    // Setup options 
    // this is needed for most server applications
    int val = 1; 
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));
    
    // Binding 
    struct sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = htons(1234);        // port
    addr.sin_addr.s_addr = htonl(0);    // wildcard IP 0.0.0.0
    int rv = bind(fd, (const struct sockaddr *)&addr, sizeof(addr));
    if (rv) { die("bind()"); }

    // listen 
    rv = listen(fd, SOMAXCONN);
    if (rv) { die("listen()");}

    // a map of connections -> {fd, conn}
    std::vector<Conn *> fd2conn; // On unix an fd is allocated as the smallest value of non negative intgers so this can replace a map and be even more efficient
    
    // the event loop
    std::vector<struct pollfd> poll_args; 

    while(true){
        // prepare the arguments of the poll()
        poll_args.clear(); 
        // put the listening sockets in the first position 
        struct pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);
        // the rest are connections sockets 
        for (Conn* conn : fd2conn){
            if(!conn){
                continue; 
            }

            struct pollfd pfd = {conn->fd, POLLERR, 0};
            // poll() flags from the application intent 
            if (conn->want_read){
                pfd.events |= POLLIN; 
            }

            if (conn->want_write){
                pfd.events |= POLLOUT; 
            }

            poll_args.push_back(pfd);   
        }

        // wait for readiness
        int rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        
        if (rv < 0 && errno != EINTR){
            continue; // not an error. Important EINTR is not an error. It should be retried 
        }

        if (rv < 0){
            die("poll");
        }

        // handle the listening socket
        if (poll_args[0].revents){ // accept() is treated as read() in readiness notifications, so it uses POLLIN. After poll() returns, check the 1st fd to see if we can accept().
            if (Conn * conn = handle_accept(fd)){ 
                // put it in the map 
                if (fd2conn.size() <= (size_t)conn->fd){ // if the index is bigger than the array size 
                    fd2conn.resize(conn->fd + 1); // resize to at least the index + 1
                }
                fd2conn[conn->fd] = conn;
            }
        }

        // handle connections sockets 
        for (size_t i = 1; i < poll_args.size(); ++i){ // Note: we skip the first 
            
            uint32_t ready = poll_args[i].revents; // this will let us know if it is ready to accept
            Conn *conn = fd2conn[poll_args[i].fd]; // this will get the connection socket we are handling 
            
            if(ready & POLLIN){
                handle_read(conn); // application logic
            }
            if(ready & POLLOUT){
                handle_write(conn); // application logic
            }

            // terminate connections 
            if((ready & POLLERR) || conn->want_close){ // If there is an error or the connection wants to close
                (void)close(conn->fd); // close the connection
                fd2conn[conn->fd] = NULL; // make that index null
                delete conn; // delete the connection 
            }
        }
    }
}